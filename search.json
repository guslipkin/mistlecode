[{"path":[]},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gus Lipkin. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lipkin G (2023). mistlecode: Advent Code helper package. http://mistlecode.guslipkin./, https://github.com/guslipkin/mistlecode.","code":"@Manual{,   title = {mistlecode: My Advent of Code helper package},   author = {Gus Lipkin},   year = {2023},   note = {http://mistlecode.guslipkin.me/, https://github.com/guslipkin/mistlecode}, }"},{"path":"/index.html","id":"mistlecode","dir":"","previous_headings":"","what":"My Advent of Code helper package","title":"My Advent of Code helper package","text":"goal mistlecode help (!) bit Advent Code.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"My Advent of Code helper package","text":"can install development version mistlecode like :","code":"install.packages(\"devtools\") devtools::install_github(\"guslipkin/mistlecode\")"},{"path":"/reference/add_processor.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Processor Layer to an Assembly Instruction Set — add_processor","title":"Add a Processor Layer to an Assembly Instruction Set — add_processor","text":"Add Processor Layer Assembly Instruction Set","code":""},{"path":"/reference/add_processor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Processor Layer to an Assembly Instruction Set — add_processor","text":"","code":"add_processor(x)"},{"path":"/reference/add_processor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Processor Layer to an Assembly Instruction Set — add_processor","text":"x vector instructions","code":""},{"path":"/reference/add_processor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Processor Layer to an Assembly Instruction Set — add_processor","text":"list vectors length two. first item \"proc\" second original instruction x.","code":""},{"path":"/reference/assembly.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an AoC Assembly Computer — create_assembly","title":"Create an AoC Assembly Computer — create_assembly","text":"Create AoC Assembly Computer","code":""},{"path":"/reference/assembly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an AoC Assembly Computer — create_assembly","text":"","code":"create_assembly(registers, functions, increment = 1, regex = \"[, \\\\+]+\")"},{"path":"/reference/assembly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an AoC Assembly Computer — create_assembly","text":"registers list registers functions list functions. Registers can referred self[[register_name]]. must two arguments, x y, even one used. index iterated private$.inc(j) j number places \"jump.\" Example: \\(x, y) private$.inc(self[[x]]) increment self$index self[[x]]. increment (Default: 1) number places increment default. regex (Default: \"[, \\\\+]+\") pattern use stringr::str_split","code":""},{"path":"/reference/assembly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an AoC Assembly Computer — create_assembly","text":"new assembly R6 object registers functions fields methods, respectively. Along functions detailed details section.","code":""},{"path":"/reference/assembly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an AoC Assembly Computer — create_assembly","text":"try_numeric(x) :  Takes input tries cast numeric. fails, returns original object. val_or_index(x) :  x numeric, return x, otherwise return self[[x]]. call(f, x, y) :  Calls one functions using x y arguments. two ways function can used: f length one x y null, f[1](f[2], f[3]) f length one, x y null, f(x, y) run(x, target, , pattern) :  Tries run instructions provided x. x character vector, try split instructions segments call(f, x, y). x: character vector instructions c(\"f x y\") list character vectors format list(c(\"f\", \"x\", \"y\")) target: (Default: NULL) register print final result. NULL, self printed. pattern: See regex argument details. .inc(increment) :  private function used increment self$index increment.","code":""},{"path":"/reference/coords_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a set of coords to a matrix — coords_to_matrix","title":"Convert a set of coords to a matrix — coords_to_matrix","text":"Convert set coords matrix","code":""},{"path":"/reference/coords_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a set of coords to a matrix — coords_to_matrix","text":"","code":"coords_to_matrix(data, row, col, maxRow = NULL, maxCol = NULL)"},{"path":"/reference/coords_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a set of coords to a matrix — coords_to_matrix","text":"data vector data row vector row indices col vector column indices maxRow row count resulting matrix maxCol column count resulting matrix","code":""},{"path":"/reference/coords_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a set of coords to a matrix — coords_to_matrix","text":"matrix dimensions row,col data","code":""},{"path":"/reference/expand_directions.html","id":null,"dir":"Reference","previous_headings":"","what":"expand_directions — expand_directions","title":"expand_directions — expand_directions","text":"expand_directions","code":""},{"path":"/reference/expand_directions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"expand_directions — expand_directions","text":"","code":"expand_directions(dt, preserve_data = FALSE)"},{"path":"/reference/expand_directions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"expand_directions — expand_directions","text":"dt data.frame vector depending preserve_data preserve_data boolean indicate data.frame (TRUE) vector (FALSE) returned.","code":""},{"path":"/reference/expand_directions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"expand_directions — expand_directions","text":"vector directions","code":""},{"path":"/reference/flash.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a Function on Each Cell in a Matrix — flash","title":"Perform a Function on Each Cell in a Matrix — flash","text":"performs function without changing matrix, applies changes .","code":""},{"path":"/reference/flash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a Function on Each Cell in a Matrix — flash","text":"","code":"flash(m, .fn, i, cores = future::availableCores())"},{"path":"/reference/flash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a Function on Each Cell in a Matrix — flash","text":"m matrix .fn function apply number times apply function whole matrix cores amount cores use applying function cell","code":""},{"path":"/reference/flash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a Function on Each Cell in a Matrix — flash","text":"matrix dimensions m","code":""},{"path":"/reference/follow_directions.html","id":null,"dir":"Reference","previous_headings":"","what":"follow_directions — follow_directions","title":"follow_directions — follow_directions","text":"follow_directions","code":""},{"path":"/reference/follow_directions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"follow_directions — follow_directions","text":"","code":"follow_directions(.data, row, col, preserve_data = FALSE)"},{"path":"/reference/follow_directions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"follow_directions — follow_directions","text":".data vector RLUD directions. See expand_directions generate data.frame direction magnitude. row starting row value col starting column value preserve_data boolean indicate data besides row col returned.","code":""},{"path":"/reference/follow_directions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"follow_directions — follow_directions","text":"data.frame coordinate pairs row col values.","code":""},{"path":"/reference/get_adjacent_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Get coordinates adjacent to a point — get_adjacent_coords","title":"Get coordinates adjacent to a point — get_adjacent_coords","text":"Get coordinates adjacent point","code":""},{"path":"/reference/get_adjacent_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get coordinates adjacent to a point — get_adjacent_coords","text":"","code":"get_adjacent_coords(   yy,   xx,   nrow = NULL,   ncol = NULL,   data = NULL,   yCount = 1,   xCount = 1 )"},{"path":"/reference/get_adjacent_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get coordinates adjacent to a point — get_adjacent_coords","text":"yy target y coordinate xx target x coordinate nrow maximum row value. needed data provided. ncol maximum column value. needed data provided. data matrix used determine nrow ncol provided. yCount number rows include either side target xCount number columns include either side target","code":""},{"path":"/reference/get_adjacent_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get coordinates adjacent to a point — get_adjacent_coords","text":"matrix row col coordinates","code":""},{"path":"/reference/get_adjacent_coords.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get coordinates adjacent to a point — get_adjacent_coords","text":"include target point. wall clipped, coordinates include clipped wall.","code":""},{"path":"/reference/get_adjacent_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get values adjacent to the target — get_adjacent_values","title":"Get values adjacent to the target — get_adjacent_values","text":"Get values adjacent target","code":""},{"path":"/reference/get_adjacent_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get values adjacent to the target — get_adjacent_values","text":"","code":"get_adjacent_values(yy, xx, data, yCount = 1, xCount = 1)"},{"path":"/reference/get_adjacent_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get values adjacent to the target — get_adjacent_values","text":"yy target y coordinate xx target x coordinate data matrix yCount number rows include either side target xCount number columns include either side target","code":""},{"path":"/reference/get_adjacent_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get values adjacent to the target — get_adjacent_values","text":"matrix dimensions specified","code":""},{"path":"/reference/get_adjacent_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get values adjacent to the target — get_adjacent_values","text":"include target point. wall clipped, dimensions include clipped wall.","code":""},{"path":"/reference/lag_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a lagged version of the input data with multiple lags at once — lag_multiple","title":"Compute a lagged version of the input data with multiple lags at once — lag_multiple","text":"Compute lagged version input data multiple lags ","code":""},{"path":"/reference/lag_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a lagged version of the input data with multiple lags at once — lag_multiple","text":"","code":"lag_multiple(x, k = 1, name = NULL)"},{"path":"/reference/lag_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a lagged version of the input data with multiple lags at once — lag_multiple","text":"x vector, single column matrix, univariate time series. Can also multi-column matrix k length 1. k (Optional) integer vector containing number lags. Defaults 1 name (Optional) name used lagged data.frame. Defaults name variable passed x. possible, name default \"X\".","code":""},{"path":"/reference/lag_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a lagged version of the input data with multiple lags at once — lag_multiple","text":"Returns data.frame lagged variable. number rows length input vector. number columns number lags used. column retains name original variable includes number lags used column. x multi-column matrix, returns matrix number columns names.","code":""},{"path":"/reference/lag_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a lagged version of the input data with multiple lags at once — lag_multiple","text":"","code":"# Creating dummy data x <- rnorm(10) # for lags 1-5 lag_multiple(x, 1:5) #>            x_l1         x_l2         x_l3         x_l4         x_l5 #> 1   1.230662325  1.114155742  1.528348905  0.077930640 -0.614121690 #> 2   1.114155742  1.528348905  0.077930640 -0.614121690  1.856505637 #> 3   1.528348905  0.077930640 -0.614121690  1.856505637 -0.662172407 #> 4   0.077930640 -0.614121690  1.856505637 -0.662172407  0.440274110 #> 5  -0.614121690  1.856505637 -0.662172407  0.440274110 -0.008806992 #> 6   1.856505637 -0.662172407  0.440274110 -0.008806992           NA #> 7  -0.662172407  0.440274110 -0.008806992           NA           NA #> 8   0.440274110 -0.008806992           NA           NA           NA #> 9  -0.008806992           NA           NA           NA           NA #> 10           NA           NA           NA           NA           NA  # 1 lag with a matrix of dummy data lag_multiple(matrix(1:100, 10, 10), 1) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    2   12   22   32   42   52   62   72   82    92 #>  [2,]    3   13   23   33   43   53   63   73   83    93 #>  [3,]    4   14   24   34   44   54   64   74   84    94 #>  [4,]    5   15   25   35   45   55   65   75   85    95 #>  [5,]    6   16   26   36   46   56   66   76   86    96 #>  [6,]    7   17   27   37   47   57   67   77   87    97 #>  [7,]    8   18   28   38   48   58   68   78   88    98 #>  [8,]    9   19   29   39   49   59   69   79   89    99 #>  [9,]   10   20   30   40   50   60   70   80   90   100 #> [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA"},{"path":"/reference/loop.html","id":null,"dir":"Reference","previous_headings":"","what":"Offset a Vector in a Looping Fashion — loop","title":"Offset a Vector in a Looping Fashion — loop","text":"Offset Vector Looping Fashion","code":""},{"path":"/reference/loop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Offset a Vector in a Looping Fashion — loop","text":"","code":"loop(x, n, margin = c(\"row\", \"col\"), index, index1 = FALSE)"},{"path":"/reference/loop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Offset a Vector in a Looping Fashion — loop","text":"x vector matrix n number places offset margin \"row\" \"col\" matrix index row column number change index1 Whether index starts 0 (FALSE) 1 (TRUE)","code":""},{"path":"/reference/loop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Offset a Vector in a Looping Fashion — loop","text":"x, appropriate shifting","code":""},{"path":"/reference/matrix_to_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a matrix to a matrix of coordinates and values — matrix_to_coords","title":"Convert a matrix to a matrix of coordinates and values — matrix_to_coords","text":"Convert matrix matrix coordinates values","code":""},{"path":"/reference/matrix_to_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a matrix to a matrix of coordinates and values — matrix_to_coords","text":"","code":"matrix_to_coords(mat)"},{"path":"/reference/matrix_to_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a matrix to a matrix of coordinates and values — matrix_to_coords","text":"mat matrix converted coordinate pair data columns","code":""},{"path":"/reference/matrix_to_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a matrix to a matrix of coordinates and values — matrix_to_coords","text":"data.frame row, col, data columns","code":""},{"path":"/reference/mistlecode-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mistlecode: My Advent of Code helper package — mistlecode-package","title":"mistlecode: My Advent of Code helper package — mistlecode-package","text":"Provides set functions tackle common Advent Code problem styles. promise help future puzzles, may help past ones.","code":""},{"path":[]},{"path":"/reference/mistlecode-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mistlecode: My Advent of Code helper package — mistlecode-package","text":"Maintainer: Gus Lipkin gus.lipkin@gmail.com","code":""},{"path":"/reference/parse_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a grid input — parse_grid","title":"Parse a grid input — parse_grid","text":"Parse grid input","code":""},{"path":"/reference/parse_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a grid input — parse_grid","text":"","code":"parse_grid(vec, width = NULL)"},{"path":"/reference/parse_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a grid input — parse_grid","text":"vec vector lines text created using readLines width width chunk. supplied, guessed (poorly...)","code":""},{"path":"/reference/parse_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a grid input — parse_grid","text":"list vectors representing grid","code":""}]
